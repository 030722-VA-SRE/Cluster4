pipeline {
  
      agent {
        kubernetes {
          label 'build-agent'
          defaultContainer 'jnlp'
          yaml """
          apiVersion: v1
          kind: Pod
          metadata:
          labels:
            component: ci
          spec:
            containers:
            - name: jnlp
              image: ikenoxamos/jenkins-slave:latest
              workingDir: /home/jenkins
              env:
              - name: DOCKER_HOST
                value: tcp://localhost:2375
              resources:
                requests:
                  memory: "500Mi"
                  cpu: "0.3"
                limits:
                  memory: "800Mi"
                  cpu: "0.5"
            - name: dind-daemon
              image: docker:18-dind
              workingDir: /var/lib/docker
              securityContext:
                privileged: true
              volumeMounts:
              - name: docker-storage
                mountPath: /var/lib/docker
              resources:
                requests:
                  memory: "300Mi"
                  cpu: "0.3"
                limits:
                  memory: "500Mi"
                  cpu: "0.5"
            - name: kubectl
              image: jshimko/kube-tools-aws:latest
              command:
              - cat
              tty: true
            volumes:
            - name: docker-storage
              emptyDir: {}
          """
        }
    }
    environment{
        registry= 'miggarcia338/chip-shop'
        dockerHubCreds = 'dockerhub'
        dockerImage =''
    }
    stages {
        stage('Code quality analysis'){
            steps{
                withSonarQubeEnv(credentialsId: '', installationName: '')}{
                    sh 'mvn verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar -Dsonar.projectKey=030722-VA-SRE_Cluster4'
                }
            }
        }
        stage('MAven clean package'){
            steps{
                sh 'mvn clean package -Dmaven.test.skip'
            }
        }
        stage('Docker build and send') {
            steps {
                script {
                    docker.withRegistry('', 'docker-jenkins-token') {
                        dockerImage = docker.build "$registry"
                        dockerImage.push("$currentBuild.number")
                        dockerImage.push("latest")
                    }
                    
                    container('kubectl') {
                      withKubeConfig([credentialsId: 'kubeconfig']) {
                          sh "aws eks update-kubeconfig --name kevin-sre-1285 --region us-east-1 "
                          sh 'kubectl get pods'
                          // The syntax below might be slightly off
                          sh "kubectl patch deployment deployment-name --set-image=$IMAGE_NAME:$IMAGE_TAG"
                      }
                    }
                }
            }
        }
        stage('Wait for approval'){
            steps{
                script{
                    try {
                        timeout(time:10, unit: 'MINUTES'){
                            approved = input mesasage: 'Deploy to production?', ok: 'Continue',
                                parameters: [choice(name: 'approved', choices: 'Yes\No', description: 'Deploy this build to production')]
                            if(approved != 'Yes'){
                                error('Build not approved')
                            }
                        }
                    } catch (error){
                        error('Build not approved in time')
                    }
                }
            }
        }
    }